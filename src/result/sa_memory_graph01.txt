Answer
Path: [4, 5, 3, 1, 0, 2] , Cost: 10
Filename: simulated_annealing.py

Line #    Mem usage    Increment   Line Contents
================================================
    13   28.402 MiB    0.000 MiB   @profile
    14                             def simulated_anealing(graph, step=10000, a=0.5, q=1000, t=50, t_min=0.000001, count_max=100):
    15   28.402 MiB    0.000 MiB       count = 0
    16   28.402 MiB    0.000 MiB       n = len(graph)
    17   28.402 MiB    0.000 MiB       s = np.random.permutation(n).tolist()  # initil solution
    18                             
    19   28.402 MiB    0.000 MiB       for i in range(step):
    20   28.402 MiB    0.000 MiB           s_next = find_better_solusion(get_neighbors(s), s, graph)
    21                             
    22   28.402 MiB    0.000 MiB           e = get_cost(s, graph)
    23   28.402 MiB    0.000 MiB           e_next = get_cost(s_next, graph)
    24                             
    25   28.402 MiB    0.000 MiB           if s == s_next:
    26   28.402 MiB    0.000 MiB               count += 1
    27                             
    28   28.402 MiB    0.000 MiB           if e_next < e:
    29   28.402 MiB    0.000 MiB               s = s_next
    30                                     else:
    31   28.402 MiB    0.000 MiB               if random.random() <= probability(e, e_next, t):
    32   28.402 MiB    0.000 MiB                   s = s_next
    33                             
    34   28.402 MiB    0.000 MiB           if i % q == 0:  # Equilibrium state
    35   28.402 MiB    0.000 MiB               t = a * t
    36                             
    37   28.402 MiB    0.000 MiB           if count > count_max:
    38   28.402 MiB    0.000 MiB               return s
    39                             
    40                                 return s


