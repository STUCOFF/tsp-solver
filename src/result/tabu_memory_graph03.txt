Answer
Path: [14, 4, 9, 3, 1, 6, 13, 5, 7, 11, 10, 2, 8, 0, 12] , Cost: 21
Filename: tabu_search.py

Line #    Mem usage    Increment   Line Contents
================================================
    11   28.367 MiB    0.000 MiB   @profile
    12                             def tabu_search(graph, tabu_max=500, step=10000, count_max=100):
    13   28.367 MiB    0.000 MiB       count = 0
    14   28.367 MiB    0.000 MiB       tabu_list = []
    15   28.367 MiB    0.000 MiB       n = len(graph)
    16   28.367 MiB    0.000 MiB       s = np.random.permutation(n).tolist()  # initil solution
    17   28.367 MiB    0.000 MiB       tabu_list.append(s)
    18                             
    19   28.367 MiB    0.000 MiB       for i in range(step):
    20                             
    21   28.367 MiB    0.000 MiB           feisible_list = []
    22   28.367 MiB    0.000 MiB           neighbors = get_neighbors(s)
    23                             
    24   28.367 MiB    0.000 MiB           for x in neighbors:
    25   28.367 MiB    0.000 MiB               if not x in tabu_list:
    26   28.367 MiB    0.000 MiB                   feisible_list.append(x)
    27                             
    28   28.367 MiB    0.000 MiB           s_next = find_better_solusion(feisible_list, s, graph)
    29                             
    30   28.367 MiB    0.000 MiB           if s == s_next:
    31   28.367 MiB    0.000 MiB               count += 1
    32                                     else:
    33   28.367 MiB    0.000 MiB               count = 0
    34                             
    35   28.367 MiB    0.000 MiB           s = s_next
    36                             
    37   28.367 MiB    0.000 MiB           if not s in tabu_list:
    38   28.367 MiB    0.000 MiB               tabu_list.append(s)
    39                             
    40   28.367 MiB    0.000 MiB           if len(tabu_list) > tabu_max:
    41                                         tabu_list.pop(0)
    42                             
    43   28.367 MiB    0.000 MiB           if count > count_max:
    44   28.367 MiB    0.000 MiB               return s
    45                             
    46                                 return s


